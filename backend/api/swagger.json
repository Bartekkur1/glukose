{
  "swagger": "2.0",
  "info": {
    "description": "Glukose api so jankos dont narzekać że nie działa",
    "version": "1.0.0",
    "title": "Glukose",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "Bartekkur1@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:8000",
  "basePath": "/api",
  "schemes": [
    "http"
  ],
  "paths": {
    "/meal": {
      "get": {
        "tags": [
          "Meal"
        ],
        "summary": "Get user meals",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Json containing all meals",
            "schema": {
              "$ref": "#/definitions/Meal"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Meal"
        ],
        "summary": "Creates new meal record",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User meal",
            "schema": {
              "$ref": "#/definitions/Meal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created new meal record"
          }
        }
      },
      "patch": {
        "tags": [
          "Meal"
        ],
        "summary": "Updates given record",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Requires record ID in order to update",
            "schema": {
              "$ref": "#/definitions/Meal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated given model"
          }
        }
      }
    },
    "/sugar": {
      "get": {
        "tags": [
          "Sugar"
        ],
        "summary": "Get user sugars",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Json containing all sugars",
            "schema": {
              "$ref": "#/definitions/Sugar"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Sugar"
        ],
        "summary": "Creates new sugar record",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User sugar",
            "schema": {
              "$ref": "#/definitions/Sugar"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created new sugar record"
          }
        }
      },
      "patch": {
        "tags": [
          "Sugar"
        ],
        "summary": "Updates given record",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Requires record ID in order to update",
            "schema": {
              "$ref": "#/definitions/Sugar"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated given model"
          }
        }
      }
    },
    "/dose": {
      "get": {
        "tags": [
          "Dose"
        ],
        "summary": "Get user doses",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Json containing all doses",
            "schema": {
              "$ref": "#/definitions/Dose"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Dose"
        ],
        "summary": "Creates new dose record",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User doses",
            "schema": {
              "$ref": "#/definitions/Dose"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created new dose record"
          }
        }
      },
      "patch": {
        "tags": [
          "Dose"
        ],
        "summary": "Updates given record",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Requires record ID in order to update",
            "schema": {
              "$ref": "#/definitions/Dose"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated given model"
          }
        }
      }
    },
    "/userinfo": {
      "get": {
        "tags": [
          "UserInfo"
        ],
        "summary": "User info API",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Fetch successfully",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserInfo"
        ],
        "summary": "Deletes old user info and inserts new one",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User informations",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated/added"
          }
        }
      }
    },
    "/auth": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User credentials",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string",
                  "example": "Admin"
                },
                "password": {
                  "type": "string",
                  "example": "123"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful login",
            "schema": {
              "$ref": "#/definitions/JWT"
            }
          },
          "400": {
            "description": "wrong login or password",
            "schema": {
              "$ref": "#/definitions/UserError"
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "Register"
        ],
        "summary": "Register api",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User credentials",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string",
                  "example": "ExampleUser"
                },
                "password": {
                  "type": "string",
                  "example": "12345678"
                },
                "email": {
                  "type": "string",
                  "example": "aiwdja9w0dj0ejf09w@gmail.com"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User created"
          },
          "400": {
            "description": "Wrong input",
            "schema": {
              "$ref": "#/definitions/UserError"
            }
          }
        }
      }
    },
    "/auth/check": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Check JWT",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "description": "Bearer token",
            "name": "authorization",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Token is fine",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "wrong login or password",
            "schema": {
              "$ref": "#/definitions/PermisionDenied"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "login": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "description": "hashed password"
        },
        "email": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        },
        "age": {
          "type": "integer",
          "format": "int64",
          "example": 18
        },
        "height": {
          "type": "integer",
          "format": "int64",
          "example": 190
        },
        "weight": {
          "type": "integer",
          "format": "int64",
          "example": 50
        },
        "insulinType": {
          "type": "string",
          "example": "humalog"
        },
        "dailyInsulineType": {
          "type": "string",
          "example": "Lantus"
        },
        "dailyInsulineAmount": {
          "type": "integer",
          "format": "int64",
          "example": 25
        }
      }
    },
    "Sugar": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "amount": {
          "type": "integer",
          "format": "int64",
          "example": 130
        },
        "date": {
          "type": "string",
          "format": "string",
          "example": "2005-04-02 21:37:30"
        }
      }
    },
    "Dose": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "amount": {
          "type": "integer",
          "format": "int64",
          "example": 8
        },
        "date": {
          "type": "string",
          "format": "string",
          "example": "2005-04-02 21:37:30"
        }
      }
    },
    "Meal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "kcal": {
          "type": "integer",
          "format": "int64",
          "example": 600
        },
        "fats": {
          "type": "integer",
          "format": "int64",
          "example": 60
        },
        "carbohydrates": {
          "type": "integer",
          "format": "int64",
          "example": 40
        },
        "date": {
          "type": "string",
          "format": "string",
          "example": "2005-04-02 21:37:30"
        }
      }
    },
    "JWT": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "UserError": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Wystąpił błąd"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "PermisionDenied": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Wymagane zalogowanie"
        },
        "message": {
          "type": "string",
          "example": "Proszę się zalogować"
        }
      }
    }
  }
}